#pragma kernel TraverseQuadTree
#pragma kernel CreatePatches
// #pragma kernel MorphArea

#include "Struct.compute"

// 当前LOD下Node的二维索引
ConsumeStructuredBuffer<uint2> consumeNodeList;
AppendStructuredBuffer<uint2> appendNodeList;
// z表示LOD等级
AppendStructuredBuffer<uint3> appendFinalNodeList;
Texture2D<float4> minMaxHeightRT;
// 存放最终的叶子节点数据,xy存储二维索引，z存储lodLevel
RWStructuredBuffer<uint3> finalNodeList;
// 存储四叉树
RWTexture2D<float4> quadTreeRT;
// 存储LOD层级
RWTexture2D<float4> lodRT;
int maxLodOffset;
uint mipSize;

uniform uint curLOD;
uniform float3 cameraPos;
uniform float3 worldSize;// 世界大小
uniform float boundRedundance; // 包围盒留出冗余
uniform float controllerC;// 用户可控制系数
/*
记录每个LOD级别的(nodeSize, patchExtent, nodeCount)
其中:
- nodeSize为Node的边长(米)
- nodeCount等于WorldSize/nodeSize
- patchExtent等于nodeSize/16,用于计算包围盒的半高宽
- eachNodeContainSector等于2^lod,用于计算morph area计算过渡
*/
uniform float4 worldLodParams[6];
uniform uint offsetOfNodeID[6];
/* 裁剪相关变量 */
uniform float4 cameraFrustumPlanes[6];
AppendStructuredBuffer<RenderPatch> culledPatchList;

uint GetNodeID(uint2 nodeLodCount, uint lodLevel);
float GetNodeSize(uint lodLevel);
float GetNodeCount(uint lodLevel);
uint GetEachNodeContainSector(uint lodLevel);
bool EvaluateNode(uint2 nodeLodCount, uint lodLevel);
float2 NodeCenterPos(uint2 nodeLodCount, uint lodLevel);
float3 GetNodeCenterPos(uint2 nodeLodCount, uint lodLevel);
RenderPatch GeneratePatch(uint3 nodeLodCount, uint2 offset);
bool IsOutSidePlane(float4 plane, float3 pos);
bool IsAABBOutOfPlane(float4 plane, float3 boundMin, float boundMax);
bool FrustmCull(float4 plane[6], Bounds bound);
Bounds GetPatchBounds(RenderPatch patch);

/*
遍历二叉树
1. 执行Dispatch
2. 从ConsumeNodeList中获取节点，对节点进行评价，决定是否分割。
3. 如果决定分割，那么将分割后的4个节点加入AppendNodeList,否则将当前节点加入AppendFinalNodeList
4. Dispatch结束, 将当前PassLOD减1，互换ConsumeNodeList和AppendNodeList，回到1执行下一个Pass
*/
[numthreads(1, 1, 1)]
void TraverseQuadTree(uint3 id : SV_DISPATCHTHREADID){
    uint2 nodeLodCount = consumeNodeList.Consume();
    uint nodeID = GetNodeID(nodeLodCount, curLOD);
    if (curLOD > 0 && EvaluateNode(nodeLodCount, curLOD)){
        appendNodeList.Append(nodeLodCount * 2 + uint2(0, 0));
        appendNodeList.Append(nodeLodCount * 2 + uint2(1, 0));
        appendNodeList.Append(nodeLodCount * 2 + uint2(0, 1));
        appendNodeList.Append(nodeLodCount * 2 + uint2(1, 1));
    } else {
        appendFinalNodeList.Append(uint3(nodeLodCount, curLOD));
    }
}

/*
每一个线程对应一个patch，8*8个patches对应一个Node
SV_DISPATCHTHREADID:线程在整个分发的线程组中的id
SV_GROUPID:线程组在整个分发线程组中的唯一id
SV_GROUPTHREADID:线程在线程组中的id
SV_GROUPINDEX：线程在本线程组中的索引
*/
[numthreads(8, 8, 1)]
void CreatePatches(uint3 id : SV_DISPATCHTHREADID, uint3 groupId : SV_GROUPID, uint3 groupThreadId : SV_GROUPTHREADID){
    uint3 nodeLodCount = finalNodeList[groupId.x];
    uint2 patchOffset = groupThreadId.xy;
    // 生成patch
    RenderPatch patch = GeneratePatch(nodeLodCount, patchOffset);
    Bounds bound = GetPatchBounds(patch);
    // if (FrustmCull(cameraFrustumPlanes, bound))
    //     return;
    culledPatchList.Append(patch);
}

// TODO: Hierarchical Z-Buffering Occlusion Culling
uint GetNodeID(uint2 nodeLodCount, uint lodLevel){
    return GetNodeCount(lodLevel) * nodeLodCount.y + nodeLodCount.x + offsetOfNodeID[lodLevel];
}

float GetNodeSize(uint lodLevel){
    return worldLodParams[lodLevel].x;
}

float GetNodeCount(uint lodLevel){
    return worldLodParams[lodLevel].y;
}

float GetNodeExtent(uint lodLevel){
    return worldLodParams[lodLevel].z;
}

uint GetEachNodeContainSector(uint lodLevel){
    return worldLodParams[lodLevel].w;
}

float2 GetNodeCenterPos2(uint2 nodeLodCount, uint lodLevel){
    float nodeSize = GetNodeSize(lodLevel);
    float nodeCount = GetNodeCount(lodLevel);
    return (nodeLodCount - (nodeCount - 1) * 0.5) * nodeSize;
}

float3 GetNodeCenterPos(uint2 nodeLodCount, uint lodLevel){
    float2 temp = GetNodeCenterPos2(nodeLodCount, lodLevel);
    float2 minMaxHeight = minMaxHeightRT.mips[lodLevel + 1][nodeLodCount].xy;
    float height = (minMaxHeight.x + minMaxHeight.y) * 0.5 * worldSize.y;
    return float3(temp.x, height, temp.y);
}

bool EvaluateNode(uint2 nodeLodCount, uint lodLevel){
    float cameraDist = distance(cameraPos, GetNodeCenterPos(nodeLodCount, lodLevel));
    float f = cameraDist / (64 * (pow(2, lodLevel + 1) - 1) * controllerC);
    if (f < 1){
        return true;
    }
    return false;
}

RenderPatch GeneratePatch(uint3 nodeLodCount, uint2 offset){
    uint lod = nodeLodCount.z;
    float nodeSize = GetNodeSize(lod);
    float patchSize = nodeSize / NODE_DIVIDE_PATCHES;
    float2 nodeCenterPos = GetNodeCenterPos2(nodeLodCount.xy, lod);

    uint2 patchLodCount = nodeLodCount.xy * NODE_DIVIDE_PATCHES + offset;
    float2 minMaxHeight = minMaxHeightRT.mips[lod + 1][patchLodCount].xy * worldSize.y + float2(-boundRedundance, boundRedundance);
    RenderPatch patch;
    patch.worldPos = nodeCenterPos + patchSize * (offset - (NODE_DIVIDE_PATCHES - 1) * 0.5);
    patch.minMaxHeight = minMaxHeight;
    patch.lodLevel = lod;
    return patch;
}

/*
https://www.gdcvault.com/play/1025480/Terrain-Rendering-in-Far-Cry
Far Cry5中有三种剔除，包括视锥体剔除、遮挡剔除、背面剔除
测试是否在平面外侧,gpu中只能用float4结构，用Ax + By + Cz + D = 0表示一个平面，
则(A, B, C)表示该平面的法线，D表示原点到平面的距离
*/
bool IsOutSidePlane(float4 plane, float3 pos){
    return (dot(plane.xyz, pos) + plane.w) < 0;
}

// 只要存在一个平面，使得整个平面的八个顶点都在平面的外侧，整个物体就在平面之外
bool IsAABBOutOfPlane(float4 plane, float3 minPos, float3 maxPos){
    return IsOutSidePlane(plane, minPos) &&
    IsOutSidePlane(plane, maxPos) &&
    IsOutSidePlane(plane, float3(minPos.xy, maxPos.z)) &&
    IsOutSidePlane(plane, float3(maxPos.x, minPos.yz)) &&
    IsOutSidePlane(plane, float3(maxPos.x, minPos.y, maxPos.z)) &&
    IsOutSidePlane(plane, float3(minPos.x, maxPos.yz)) &&
    IsOutSidePlane(plane, float3(maxPos.xy, minPos.z)) &&
    IsOutSidePlane(plane, float3(minPos.x, maxPos.y, minPos.z));
}

bool FrustmCull(float4 plane[6], Bounds bound){
    return IsAABBOutOfPlane(plane[0], bound.minPos, bound.maxPos) ||
    IsAABBOutOfPlane(plane[1], bound.minPos, bound.maxPos) ||
    IsAABBOutOfPlane(plane[2], bound.minPos, bound.maxPos) ||
    IsAABBOutOfPlane(plane[3], bound.minPos, bound.maxPos) ||
    IsAABBOutOfPlane(plane[4], bound.minPos, bound.maxPos) ||
    IsAABBOutOfPlane(plane[5], bound.minPos, bound.maxPos);
}

Bounds GetPatchBounds(RenderPatch patch){
    float extent = GetNodeExtent(patch.lodLevel);
    Bounds bound;
    float3 boundMin, boundMax;
    boundMin.y = patch.minMaxHeight.x;
    boundMax.y = patch.minMaxHeight.y;
    boundMin.xz = patch.worldPos - float2(extent, extent);
    boundMax.xz = patch.worldPos + float2(extent, extent);
    bound.minPos = boundMin;
    bound.maxPos = boundMax;
    return bound;
}
